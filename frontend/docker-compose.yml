version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventory-db
    environment:
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_pass
      POSTGRES_DB: inventory_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: inventory-backend
    environment:
      DATABASE_URL: postgresql://inventory_user:inventory_pass@postgres:5432/inventory_db
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 480
      BACKEND_CORS_ORIGINS: '["http://localhost:3000","http://localhost","http://frontend"]'
      ENVIRONMENT: development
      DEBUG: "True"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - inventory-network
    command: >
      sh -c "
        python -m app.init_db &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: inventory-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - inventory-network
    environment:
      - VITE_API_URL=http://localhost:8000

volumes:
  postgres_data:

networks:
  inventory-network:
    driver: bridge